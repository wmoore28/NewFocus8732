#
# NewFocus8732.proto
#

Terminator = "\r";

# Send Generic command (string) on X
# Record: stringout
setCmd {
   out "%s";
}

# Read Generic Response (string) on X
# Record: stringin
readResp {
   in "%#s";
}

# Set Frequency
# Record: ao
setFreq {
  out "@:SOUR:PULS:FREQ %.1f Hz";
  in "OK";
}

# Get Frequency
# Record: ai
getFreq {
  out "@:SOUR:PULS:FREQ?";
  in "%f Hz";
}

# Set Period
# Record: ao
setPer {
  out "@:SOUR:PULS:PER %f S";
  in "OK";
}

# Get Period
# Record: ai
getPer {
  out "@:SOUR:PULS:PER?";
  in "%f S";
}

# Set Number of Steps
# Record: longout
setSteps {
  out "@:SOUR:PULS:COUN %d";
  in "OK";
}

# Set Slot, Connector, Channel No.
# Record: longout
setChan {
  out "@:INST:NSEL %d";
  in "OK";
}

# Get Slot, Connector, Channel No.
# Record: longin
getChan {
  out "@:INST:NSEL?";
  in "%d";
}

# Set Direction
# Record: bo
#   ZRST: CCW
#   ONST: CW
setDirection {
  out "%{@:SOUR:DIR CCW|@:SOUR:DIR CW}";
  in "OK";
}

# Get Direction
# Record: bi
#   ZRST: CCW
#   ONST: CW
getDirection {
  out "@:SOUR:DIR?";
  in "%{CCW|CW}";
}

# Set On/Off
# Record: bo
#   ZRST: OFF
#   ONST: ON
setOnOff {
  out "%{@:INST:STAT 0|@:INST:STAT 1}";
}

# Read status of move from Picomotor Driver
# Record: ai
readMStatus {
  out "@:INST:STAT?";
  in  "%f";
}

# Reset
# Record: bo
setReset {
  out "@*RST";
}

# Read ID
# Record: stringin
readID {
  out "@*IDN?";
  in  "%39c";
}

# Operation complete status
# Record: bi
readOPC {
  out "@*OPC?";
  in  "%d";
}



